# 栈

## 概念

- `栈`是一种特殊的线性表，只能在`一端`进行操作。
- 添加元素是`push，入栈`。
- 删除元素是`pop，出栈`
- 后进先出的原则，Last in First out，`LIFO`



![image-20201213130913079](https://gitee.com/likeloveC/picture_bed/raw/master/img/8.26/20201213130920.png)



## 接口设计

![image-20201213131224744](https://gitee.com/likeloveC/picture_bed/raw/master/img/8.26/20201213131224.png)





## 代码实现

使用组合的方式，保证接口的隔离性

```java
public class Stack<T> {

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>(new ArrayList<>());
        stack.push(11);
        stack.push(22);
        stack.push(33);
        stack.push(44);
        while (stack.list.size() > 0) {
            System.out.println(stack.pop());
        }
    }

    private List<T> list = new ArrayList<>();

    public Stack() {
    }

    public Stack(List<T> list) {
        this.list = list;
    }

    public void push(T o) {
        list.add(o);
    }

    public T pop() {
        return list.remove(list.size() - 1);
    }

    public T top() {
        return list.get(list.size() - 1);
    }
}

```





# 力扣-20有效的括号

```java
public class _20有效的括号 {

    public static void main(String[] args) {
        String s = "([])";
//        System.out.println(isValid(s));
        System.out.println(isValidUseMap(s));
    }

    public static boolean isValidUseMap(String s) {
        Stack<Character> stack = new Stack<>();
        Map<Character, Character> map = new HashMap<>(3);
        map.put('(', ')');
        map.put('[', '}');
        map.put('{', '}');

        boolean flag = false;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (map.containsKey(c)) {
                stack.push(c);
                if (i == s.length() - 1) flag = false;

            } else {
                if (stack.isEmpty()) return false;
                Character key = stack.pop();
                // 这时候c是value
                flag = c == map.get(key);
            }
        }
        return flag;
    }

    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        int length = s.length();
        for (int i = 0; i < length; i++) {

            char string = s.charAt(i);
            if ('(' == string || '[' == string || '{' == string) {
                stack.push(string);
            } else {
                if (stack.isEmpty()) {
                    return false;
                }
                char left = stack.pop();
                if ('(' == (left) && ')' != string) {
                    return false;
                }
                if ('[' == (left) && ']' != (string)) {
                    return false;
                }
                if ('{' == (left) && '}' != (string)) {
                    return false;
                }
            }
        }
        return stack.isEmpty();

    }
}
```